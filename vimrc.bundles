if &compatible
  set nocompatible
end

set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

" Let Vundle manage Vundle
Plugin 'gmarik/Vundle.vim'
Plugin 'leafOfTree/vim-vue-plugin'


" For Vue.js
Plugin 'posva/vim-vue'

" To find matching braces
Plugin 'https://github.com/adelarsq/vim-matchit'


" Define bundles via Github repos
Plugin 'christoomey/vim-run-interactive'
Plugin 'croaky/vim-colors-github'
Plugin 'kchmck/vim-coffee-script'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
Plugin 'pbrisbin/vim-mkdir'
" Replacing sytastic with ale
"Plugin 'scrooloose/syntastic'
Plugin 'w0rp/ale'
Plugin 'slim-template/vim-slim'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'vim-ruby/vim-ruby'
Plugin 'vim-scripts/ctags.vim'
Plugin 'vim-scripts/matchit.zip'
Plugin 'vim-scripts/tComment'
" for molokai dark theme
" Plugin 'pR0Ps/molokai-dark'

Plugin 'mattn/webapi-vim'
Plugin 'mattn/gist-vim'  " For gists
Plugin 'Raimondi/delimitMate'
Bundle 'Rip-Rip/clang_complete'
Plugin 'bling/vim-airline'

" You need these 4 for snipmate
Plugin 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'
" ===========


Plugin 'terryma/vim-multiple-cursors'
Plugin 'mattn/emmet-vim'
Plugin 'rizzatti/dash.vim'
Plugin 'morhetz/gruvbox'

Plugin 'vimwiki/vimwiki'

" For icons on file types
Plugin 'ryanoasis/vim-devicons'

" For startup screen
Plugin 'mhinz/vim-startify'

"   Bundle 'Valloric/YouCompleteMe'

if has('nvim')
  Plugin 'Shougo/deoplete.nvim'
else
  Plugin 'Shougo/deoplete.nvim'
  Plugin 'roxma/nvim-yarp'
  Plugin 'roxma/vim-hug-neovim-rpc'
endif


if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

call vundle#end()
filetype plugin indent on    " required
colorscheme gruvbox
"For Vim solarized
syntax enable
""let g:solarized_termcolors=256
"set background=dark
""colorscheme solarized
"#############################


autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1 
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1



" For vim-multiple-cursors
let g:multi_cursor_quit_key            = '<C-s>'
let g:multi_cursor_quit_key            = '<C-s>'
let g:multi_cursor_exit_from_visual_mode = 1
let g:multi_cursor_exit_from_insert_mode = 1



" Mapping Fzf to Ctrl-P
nnoremap <silent> <C-P> :Files<CR>


" ale only lint on saves
let g:ale_lint_on_text_changed = 'never'


let g:airline_powerline_fonts = 1




"FZF with devicons
"Remember to install nerdfonts with this
let $FZF_DEFAULT_COMMAND = 'rg --hidden -l ""'


" ripgrep
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
  set grepprg=rg\ --vimgrep
  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif

" Files + devicons
function! Fzf_dev()
  let l:fzf_files_options = '--preview "bat --theme="OneHalfDark" --style=numbers,changes --color always {2..-1} | head -'.&lines.'"'

  function! s:files()
    let l:files = split(system($FZF_DEFAULT_COMMAND), '\n')
    return s:prepend_icon(l:files)
  endfunction

  function! s:prepend_icon(candidates)
    let l:result = []
    for l:candidate in a:candidates
      let l:filename = fnamemodify(l:candidate, ':p:t')
      let l:icon = WebDevIconsGetFileTypeSymbol(l:filename, isdirectory(l:filename))
      call add(l:result, printf('%s %s', l:icon, l:candidate))
    endfor

    return l:result
  endfunction

  function! s:edit_file(item)
    let l:pos = stridx(a:item, ' ')
    let l:file_path = a:item[pos+1:-1]
    execute 'silent e' l:file_path
  endfunction

  call fzf#run({
        \ 'source': <sid>files(),
        \ 'sink':   function('s:edit_file'),
        \ 'options': '-m ' . l:fzf_files_options,
        \ 'down':    '40%' })
endfunction

" Open fzf Files
map <C-p> :call Fzf_dev()<CR>
map <C-b> :Buffers<CR>


" Vim wiki
let g:vimwiki_list = [{'path': '~/dotfiles/vimwiki/',
                      \ 'syntax': 'markdown', 'ext': '.md'}]


" vim airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1

" Util Snips
let g:UltiSnipsExpandTrigger="<C-j>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"

" deoplete
let g:deoplete#enable_at_startup = 1


" configure .md for markdown files 
augroup markdown
  au!
  au BufNewFile,BufRead *.md,*.markdown,*.mmd setlocal filetype=ghmarkdown
  au BufNewFile,BufRead *.md,*.markdown,*.mmd UltiSnipsAddFiletypes ghmarkdown.markdown
augroup end

" emmit set to controly y
let g:user_emmet_leader_key='<C-y>'











